<?xml version="1.0" encoding="utf-8"?>
<pre>
  <Test>

    <MQA>
	<Desc>What is the solution x of the following quadratic?</Desc>
	<Problem>ax^2+bx+c=0</Problem>
	<Exec>warmupSage=1</Exec>
	<Exec>warmupSage=2</Exec>
	<Exec>warmupSage=3</Exec>
	<RandomInt Name="a" Min="1" Max="200" />
	<RandomInt Name="b" Min="1" Max="200" />
	<RandomInt Name="c" Min="1" Max="200" />
	<Solution>N( (-b + sqrt((b^2)-(4*a*c))  ) / (2*a) , digits=4)</Solution>
	<Solution>N( (-b - sqrt((b^2)-(4*a*c))  ) / (2*a) , digits=4)</Solution>
    </MQA>

	<!-- import numpy;
	var('Ax Ay Az Bx By Bz');
	A=numpy.array([Ax,Ay,Az]);  B=numpy.array([Bx,By,Bz]);
	C=numpy.dot(A,B); -->
    <MQA>
	<Desc>What is the dot product of vectors A and B?</Desc>
	<Problem>A.B</Problem>
	<Solution>numpy.dot(A,B)</Solution>
	<Exec>import numpy; var('Ax Ay Az Bx By Bz');</Exec>
	<Var Name="A" DisplayValue="Axi + Ayj + Azk"
		Exec="var('Ax Ay Az'); A=numpy.array([Ax,Ay,Az])" />
	<Var Name="B" DisplayValue="Bxi + Byj + Bzk"
		Exec="var('Bx By Bz'); B=numpy.array([Bx,By,Bz])"/>
    </MQA>

	<!-- Variant of Boas page 104 Q10 -->
    <MQA>
	<Desc>Find A algebraically </Desc>
	<Problem>.</Problem>
	<Solution>A</Solution>
	<Exec>import numpy;</Exec>
	<RandomInt Name="Ax" Min="1" Max="5" Hidden="y" />
	<RandomInt Name="Ay" Min="1" Max="5" Hidden="y"/>
	<RandomInt Name="Az" Min="1" Max="5" Hidden="y" />
	<RandomInt Name="Bx" Min="1" Max="5" Hidden="y" />
	<RandomInt Name="By" Min="1" Max="5" Hidden="y" />
	<RandomInt Name="Bz" Min="1" Max="5" Hidden="y" />
	<Exec>A=numpy.array([Ax,Ay,Az])</Exec>
	<Exec>B=numpy.array([Bx,By,Bz])</Exec>
	<Var Name="ABSum" DisplayName="A+B" Exec="A+B" DisplayFilter="array" />
	<Var Name="ABDiff" DisplayName="A-B" Exec="A-B" DisplayFilter="array" />
	<Exec>ABSum = A+B</Exec>
	<Exec>ABDiff = A-B</Exec>
    </MQA>

	<!-- Variant of Boas page 104 Q12 -->
    <MQA>
	<Desc>Find angle between A and B</Desc>
	<Problem>.</Problem>
	<Solution>(180/N(pi)) * arccos ( numpy.dot(A,B) / (numpy.linalg.norm(A) * numpy.linalg.norm(B)) )</Solution>
	<Exec>import numpy;</Exec>
	<RandomInt Name="Ax" Min="1" Max="5" Hidden="y" />
	<RandomInt Name="Ay" Min="1" Max="5" Hidden="y"/>
	<RandomInt Name="Az" Min="1" Max="5" Hidden="y" />
	<RandomInt Name="Bx" Min="1" Max="5" Hidden="y" />
	<RandomInt Name="By" Min="1" Max="5" Hidden="y" />
	<RandomInt Name="Bz" Min="1" Max="5" Hidden="y" />
	<Var Name="A" Exec="numpy.array([Ax,Ay,Az])" />
	<Var Name="B" Exec="numpy.array([Bx,By,Bz])" />
    </MQA>

  </Test>
</pre>

